name: TORI Data Processing

on:
  schedule:
    # Runs daily at 8:00 AM UTC
    # Note: GitHub Actions cron may have delays of 5-15 minutes
    - cron: '0 8 * * *'
  workflow_dispatch: # Allows manual trigger for testing

env:
  PYTHON_VERSION: '3.12'  
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  AZURE_SQL_SERVER: ${{ secrets.AZURE_SQL_SERVER }}
  AZURE_SQL_DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
  AZURE_SQL_USERNAME: ${{ secrets.AZURE_SQL_USERNAME }}
  AZURE_SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}

jobs:
  process-tori-data:
    runs-on: ubuntu-latest
    timeout-minutes: 60  
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'  
    
    - name: Install Microsoft ODBC Driver for SQL Server
      run: |
        echo "üîß Installing Microsoft ODBC Driver 17 for SQL Server..."
        
        # Add Microsoft repository
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        
        # Update package list
        sudo apt-get update
        
        # Install ODBC driver and tools
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 unixodbc-dev
        
        # Verify installation
        odbcinst -q -d -n "ODBC Driver 17 for SQL Server"
        
        echo "‚úÖ ODBC Driver installed successfully"
    
    - name: Install dependencies
      run: |
        echo "üì¶ Installing Python dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ Dependencies installed successfully"
    
    - name: Configure environment
      run: |
        echo "üîß Verifying environment variables..."
        echo "CLIENT_ID is set: $([[ -n "$CLIENT_ID" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "CLIENT_SECRET is set: $([[ -n "$CLIENT_SECRET" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "AZURE_SQL_SERVER is set: $([[ -n "$AZURE_SQL_SERVER" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "AZURE_SQL_DATABASE is set: $([[ -n "$AZURE_SQL_DATABASE" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "AZURE_SQL_USERNAME is set: $([[ -n "$AZURE_SQL_USERNAME" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "AZURE_SQL_PASSWORD is set: $([[ -n "$AZURE_SQL_PASSWORD" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "‚úÖ Environment configured"
    
    - name: Pre-flight Connection Test
      id: connection_test
      timeout-minutes: 5
      continue-on-error: true
      run: |
        echo "üîç Running pre-flight connection tests..."
        echo "‚è∞ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        python -c "
        import os
        import requests
        import pyodbc
        
        # Test OAuth2 endpoint connectivity
        print('üîó Testing OAuth2 endpoint connectivity...')
        try:
            response = requests.get('https://login.microsoftonline.com/05d75c05-fa1a-42e7-9cf1-eb416c396f2d/.well-known/openid-configuration', timeout=10)
            print(f'‚úÖ OAuth2 endpoint reachable: {response.status_code}')
        except Exception as e:
            print(f'‚ö†Ô∏è OAuth2 endpoint test failed: {e}')
        
        # Test TORI API endpoint connectivity  
        print('üîó Testing TORI API endpoint connectivity...')
        try:
            response = requests.head('https://tori-agent.maersk-digital.net', timeout=10)
            print(f'‚úÖ TORI API endpoint reachable: {response.status_code}')
        except Exception as e:
            print(f'‚ö†Ô∏è TORI API endpoint test failed: {e}')
        
        # Verify ODBC drivers available
        print('üîó Testing ODBC driver availability...')
        try:
            drivers = [x for x in pyodbc.drivers() if 'SQL Server' in x]
            print(f'‚úÖ Available SQL Server drivers: {drivers}')
            
            # Test SQL Server connectivity
            connection_string = f\"Driver={{{drivers[0] if drivers else 'ODBC Driver 17 for SQL Server'}}};Server={os.getenv('AZURE_SQL_SERVER')};Database={os.getenv('AZURE_SQL_DATABASE')};Uid={os.getenv('AZURE_SQL_USERNAME')};Pwd={os.getenv('AZURE_SQL_PASSWORD')};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=10;\"
            conn = pyodbc.connect(connection_string)
            conn.close()
            print('‚úÖ Azure SQL Database connection successful')
        except Exception as e:
            print(f'‚ö†Ô∏è Database connectivity test failed: {e}')
        "
        echo "‚è∞ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
    
    - name: Step 1 - OAuth2 Authentication
      id: oauth_auth
      timeout-minutes: 5
      run: |
        echo "üîê Starting Step 1: OAuth2 Authentication..."
        echo "‚è∞ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        python -c "
        import sys
        sys.path.append('.')
        from main import get_access_token
        import logging
        
        # Configure logging for GitHub Actions
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        
        try:
            print('üîê Testing OAuth2 authentication...')
            token = get_access_token()
            print(f'‚úÖ OAuth2 token obtained (length: {len(token)} characters)')
            print('‚úÖ Step 1: Authentication completed successfully')
        except Exception as e:
            print(f'‚ùå Step 1: Authentication failed: {str(e)}')
            sys.exit(1)
        "
        echo "‚è∞ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
    
    - name: Step 2 - Fetch TORI Data
      id: fetch_data
      timeout-minutes: 10
      run: |
        echo "üìä Starting Step 2: Fetching TORI data..."
        echo "‚è∞ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        python -c "
        import sys
        sys.path.append('.')
        from main import fetch_data_from_api
        import logging
        
        # Configure logging for GitHub Actions
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        
        try:
            print('üì° Fetching data from TORI API...')
            csv_data = fetch_data_from_api()
            data_size = len(csv_data) if csv_data else 0
            print(f'‚úÖ Data fetched successfully: {data_size:,} characters')
            
            # Store data size for next step
            with open('data_size.txt', 'w') as f:
                f.write(str(data_size))
            
            # Save CSV data for processing step
            with open('tori_data.csv', 'w', encoding='utf-8') as f:
                f.write(csv_data)
            
            print('‚úÖ Step 2: Data fetch completed successfully')
        except Exception as e:
            print(f'‚ùå Step 2: Data fetch failed: {str(e)}')
            sys.exit(1)
        "
        echo "‚è∞ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
    
    - name: Step 3 - Process and Store Data
      id: process_data
      timeout-minutes: 30
      run: |
        echo "üíæ Starting Step 3: Processing and storing data..."
        echo "‚è∞ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Read data size from previous step
        DATA_SIZE=$(cat data_size.txt)
        echo "üìä Processing $DATA_SIZE characters of CSV data"
        
        python -c "
        import sys
        sys.path.append('.')
        from main import process_csv_data
        import logging
        
        # Configure logging for GitHub Actions
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        
        try:
            print('üíæ Processing CSV data and inserting into database...')
            
            # Read CSV data from file
            with open('tori_data.csv', 'r', encoding='utf-8') as f:
                csv_content = f.read()
            
            process_csv_data(csv_content)
            print('‚úÖ Step 3: Data processing completed successfully')
        except Exception as e:
            print(f'‚ùå Step 3: Data processing failed: {str(e)}')
            sys.exit(1)
        "
        echo "‚è∞ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
    
    - name: Cleanup temporary files
      if: always()  
      run: |
        echo "üßπ Cleaning up temporary files..."
        rm -f data_size.txt tori_data.csv
        echo "‚úÖ Cleanup completed"
    
    - name: Job Summary
      if: always()  
      run: |
        echo "üìã TORI Data Processing Job Summary"
        echo "=================================="
        echo "‚è∞ Job completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "üîê OAuth Authentication: $([[ "${{ steps.oauth_auth.outcome }}" == "success" ]] && echo "‚úÖ Success" || echo "‚ùå Failed")"
        echo "üìä Data Fetch: $([[ "${{ steps.fetch_data.outcome }}" == "success" ]] && echo "‚úÖ Success" || echo "‚ùå Failed")"
        echo "üíæ Data Processing: $([[ "${{ steps.process_data.outcome }}" == "success" ]] && echo "‚úÖ Success" || echo "‚ùå Failed")"
        echo "üîó Connection Test: $([[ "${{ steps.connection_test.outcome }}" == "success" ]] && echo "‚úÖ Success" || echo "‚ö†Ô∏è Skipped/Failed")"